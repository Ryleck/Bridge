/**
 * Created by Phil on 2016-10-22.
 */

//var planchette = {noPl: 0, vulnerabilite: 0, contrat: "", declarant: "", entame: "", resultat: 0, score: 0, termine: 0};
//var ronde = {noRonde: 0, eNS: "", eEO: "", nomsNS: [], nomsEO: [], planchettes: [], termine: 0};
//var table = {noTable: 0, rondes: [], noAcces: 0, occupe: 0, termine: 0};
//var partie = {nom: "", nbEquipes : 0, nbPlanchettes : 0, nbRondes: 0, fantome : 0, fini : 0, tables: []};
//var index = {noAcces: 0, addr: ""};
var gest = {parties : [], tIndex: []};
var mov = require('../mouvement/mouvement');
var lettre = require('../lettre-equipe/lettreEquipe');
var tblRndPlEq = require('../tablePlanchettesJouees/tablePlanchettesJouees');
var moduleNbRondes = require('../nbRondes/nbRondes');
var fs = require('fs');
var tableauEquipeFantome = [
    [6,[
        ['A','F'],
        ['B','F'],
        ['C','F'],
        ['D','F'],
        ['E','F']
        ]
    ]
];

var noPartie = 0;
var nbTables = 0;

var noms = {nomsLigne1 : [], nomsLigne2 : []};
var varVulPPl = [0,1,2,3,1,2,3,0,2,3,0,1,3,0,1,2];
var tableADPlanchette = [];

module.exports = {


    chargePartie: function (nomPartie, infoPartieJson) {
        var indexPartie = partieExiste(nomPartie);
        var nomSauvgarde = './fichiers/parties jouees/'+nomPartie+'.txt';
        //console.log(gest);
        mov.initMouvement();
        if (indexPartie >= 0) {
            partieExistante(indexPartie);
            //console.log("Existe");
        } else {

            if(fs.existsSync(nomSauvgarde) == true){
                var content = fs.readFileSync(nomSauvgarde, 'utf8');
                //console.log(JSON.parse(content).tables[0].rondes[0].planchettes[0]);
                gest.parties.push(JSON.parse(content));
                indexPartie = (parseInt(gest.parties.length)-1);
                //tblRndPlEq.nbEquipes(gest.parties[indexPartie].nbEquipes);
                //tblRndPlEq.nbPlanchettes(gest.parties[indexPartie].nbPlanchettes);
                //tblRndPlEq.creeTable();

                console.log("Charge");
            }else {
                indexPartie = nouvellePartie(nomPartie, infoPartieJson);
                partieExistante(indexPartie);
                console.log("Existe pas");
            }
        }
        for(i = 0; i < gest.parties.length; i++) {
            //console.log(gest.parties[i].tablePlanchettesJouees.retourneTable());
        }
        return indexPartie;
        //console.log(gest.parties[0]);
    },

    retourneTables: function(indexPartie){
        //var partieTemp = trouvePartie(nomPartie);
        return gest.parties[indexPartie].tables;
    },

    retourneNoRonde: function(indexPartie, noTable){
        var tableTemp = gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)];
        var nbRondes = parseInt(gest.parties[indexPartie].nbRondes);
        var i = 0;


        if(gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable) - 1)].overrideRondePlanchette != 0){
            return gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable) - 1)].overrideRondePlanchette;
        }else {
            if (rondeTermine(tableTemp, gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable) - 1)].overrideRonde) == false) {
                return gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable) - 1)].overrideRonde;
            } else {
                gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable) - 1)].overrideRonde = 0;
                //console.log(nbRondes);
                for (i = 0; i < nbRondes; i++) {
                    if (parseInt(tableTemp.rondes[i].termine) != 1) {
                        return tableTemp.rondes[i].noRonde;
                    }
                }
            }
        }
        return -1;
    },

    overrideNoRonde: function(indexPartie, noTable, overRonde){
        gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].overrideRonde = overRonde;
        gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].overrideRondePlanchette = 0;
        gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].overridePlanchette = 0;
    },

    overrideNoPlanchette: function(indexPartie, noTable, overRonde, overPlanchette){
        gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].overrideRonde = 0;
        gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].overrideRondePlanchette = overRonde;
        gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].overridePlanchette = parseInt(overPlanchette);
    },

    retourneNoPlanchette: function(indexPartie, noTable, noRonde, affiche){
        var rondeTemp = gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].rondes[(parseInt(noRonde)-1)];
        var nbPl = parseInt(rondeTemp.planchettes.length);
        var i = 0;
        var vNoPlanchette = -1;

        if(gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable) - 1)].overridePlanchette != 0){
            var noPl = gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].overridePlanchette;
            if(affiche == false) {
                gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable) - 1)].overrideRondePlanchette = 0;
                gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable) - 1)].overridePlanchette = 0;
            }
            return noPl;
        }else {

            //console.log(nbRondes);
            for (i = 0; i < nbPl; i++) {
                if (parseInt(rondeTemp.planchettes[i].termine) != 1) {
                    return rondeTemp.planchettes[i].noPlanchette;
                }
            }
        }


        /*if(parseInt(gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].overridePlanchette) != 0){
            console.log("OverridePl : " + gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].overridePlanchette);
            vNoPlanchette = gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].overridePlanchette;
            gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].overridePlanchette = 0;
            gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].overrideRonde = 0;
        }else {
            for (i = 0; i < nbPl; i++) {
                if (parseInt(rondeTemp.planchettes[i].termine) != 1) {
                    return rondeTemp.planchettes[i].noPlanchette;
                }
            }
        }*/
        return vNoPlanchette;
    },

    retourneENS: function(indexPartie, noTable, noRonde){
        return gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].rondes[(parseInt(noRonde)-1)].eNS;
    },

    retourneEEO: function(indexPartie, noTable, noRonde){
        return gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].rondes[(parseInt(noRonde)-1)].eEO;
    },

    retourneNomsNS: function(indexPartie, noTable, noRonde){
        return gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].rondes[(parseInt(noRonde)-1)].nomsNS;
    },

    retourneNomsEO: function(indexPartie, noTable, noRonde){
        return gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].rondes[(parseInt(noRonde)-1)].nomsEO;
    },

    retourneVul: function(indexPartie, noTable, noRonde, noPlanchette){
        //console.log(indexPartie +" "+ noTable+" "+ noRonde+" "+ noPlanchette);
        return gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].rondes[(parseInt(noRonde)-1)].planchettes[retourneIndexPlanchette(indexPartie, noTable, noRonde, noPlanchette)].vulnerabilite;
    },

    retourneIDPl: function(indexPartie, noTable, noRonde, noPlanchette){
        //console.log(indexPartie +" "+ noTable+" "+ noRonde+" "+ noPlanchette);
        return gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].rondes[(parseInt(noRonde)-1)].planchettes[retourneIndexPlanchette(indexPartie, noTable, noRonde, noPlanchette)].idPlanchette;
    },

    tableTermine: function(indexPartie, noTable){
        //rondesTermine(gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)])
        if(parseInt(gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable)-1)].termine) === 1){
            return true;
        }else{
            return false;
        }
    },

    ecrireResultatPlanchette: function(requete){
        var infoPlanchette = retourInfoPlanchette(requete.idPlanchette);
        var indexPartie = infoPlanchette[0];
        var indexTable = infoPlanchette[1];
        var indexRonde = infoPlanchette[2];
        var indexPlanchette = infoPlanchette[3];
        var jouee = false;

        //console.log(requete);
        //var indexPlanchette = retourneIndexPlanchette(infoTable.indexPartie, infoTable.noTable, infoTable.noRonde, infoTable.noPlanchette);
        var planchette = gest.parties[parseInt(indexPartie)].tables[parseInt(indexTable)].rondes[parseInt(indexRonde)].planchettes[indexPlanchette];
        var ronde = gest.parties[parseInt(indexPartie)].tables[parseInt(indexTable)].rondes[parseInt(indexRonde)];
        //var signe = determineSigne(requete.faitSigne);
        var nbLevees = requete.nbLeves;
        var contra = parseInt(nbLevees)+6;
        var fait = parseInt(requete.fait);
        var diff = fait - contra;
        var lPointage;
        var index = 0;
        //console.log(planchette);
        if((typeof nbLevees != 'undefined')) {
            planchette.contrat = nbLevees + ' ' + determineCouleur(requete.couleur);
        }else{
            planchette.contrat = 'Passe';
        }
        planchette.contre = requete.contre;

        if((typeof requete.par != 'undefined')) {
            planchette.declarant = determineDeclarant(requete.par);
        }else{
            planchette.declarant = 'Passe';
        }

        if((typeof requete.entame != 'undefined')) {
            planchette.entame = retourneEntame(requete.entame) + ' de ' + determineCouleur(requete.entameCouleur);
        }else{
            planchette.entame = 'Passe';
        }

        if(diff == 0){
            planchette.resultat = "=";
        }else if(diff > 0){
            planchette.resultat = "+"+diff;
        }else if(diff < 0){
            planchette.resultat = diff;
        }else{
            planchette.resultat = "passe";
        }
        //console.log("Ecrire resultat 3");
        /*
        if(signe != '='){
            planchette.resultat = signe+requete.fait;
        }else{
            planchette.resultat = signe;
        }*/

        planchette.score = parseInt(requete.pNS) - parseInt(requete.pEO);
        planchette.termine = 1;

        //console.log(lettre.retourneIndex(ronde.eEO));
        lPointage = retourneLignePointage(planchette.noPlanchette, gest.parties[parseInt(indexPartie)].feuillePointage.lignePointage);

        index = lettre.retourneIndex(ronde.eNS);
        if(lPointage.pointageEquipe[index].score > 0){
            jouee = true;
        }
        lPointage.pointageEquipe[index].score = parseInt(planchette.score);
        lPointage.pointageEquipe[index].orientation = "NS";

        index = lettre.retourneIndex(ronde.eEO);
        lPointage.pointageEquipe[index].score = -parseInt(planchette.score);
        lPointage.pointageEquipe[index].orientation = "EO";

        if((lPointage.totalJoue < gest.parties[parseInt(indexPartie)].nbEquipes/2) && (jouee == false)) {
            lPointage.totalJoue += 1;
        }
        //console.log(gest.parties[parseInt(indexPartie)].nbEquipes/2);

        if(lPointage.totalJoue == (gest.parties[parseInt(indexPartie)].nbEquipes/2)){
            calculePointage(lPointage, gest.parties[parseInt(indexPartie)].fantome);
        }
        //console.log(lPointage);
        if(planchettesTermine(gest.parties[parseInt(indexPartie)].tables[parseInt(indexTable)].rondes[parseInt(indexRonde)]) == true){
            gest.parties[parseInt(indexPartie)].tables[parseInt(indexTable)].rondes[parseInt(indexRonde)].termine = 1;
        }

        if(rondesTermine(gest.parties[parseInt(indexPartie)].tables[parseInt(indexTable)]) == true){
            gest.parties[parseInt(indexPartie)].tables[parseInt(indexTable)].termine = 1;
        }
        /*var obj = gest.parties[parseInt(indexPartie)];
        console.log(obj);
        var objStr = JSON.stringify(gest.parties[parseInt(indexPartie)]);
        console.log(objStr);
        console.log(JSON.parse(objStr).tables[0].rondes);*/
        sauvgarderPartie(indexPartie);
    },

    retourneNomsEquipe: function(infoTable, indexEquipe){
        //var index = lettre.retourneIndex(equipe);
        return gest.parties[parseInt(infoTable.indexPartie)].feuillePointage.noms[indexEquipe];
    },

    retourneNbEquipes: function(infoTable){
        return gest.parties[parseInt(infoTable.indexPartie)].nbEquipes;
    },

    retourneNbPlanchettes: function(infoTable){
        return gest.parties[parseInt(infoTable.indexPartie)].nbPlanchettes;
    },

    retourneScoreEquipe: function(infoTable, i, j){
        return gest.parties[parseInt(infoTable.indexPartie)].feuillePointage.lignePointage[j].pointageEquipe[i].pointage;
    },

    retourneAccesDirectRondes: function(indexPartie, noTable){
        var rondes = gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable) - 1)].rondes;
        var i = 0;
        var j = 0;
        var accDirect = [];
        for(i = 0; i < rondes.length; i++){
            if(parseInt(rondes[i].termine) != 1){
                accDirect.push(rondes[i].noRonde);
            }
        }
        return accDirect;
    },

    retourneRondes: function(indexPartie, noTable){
        return gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable) - 1)].rondes;

    },

    retourneAccesDirectPlanchettes: function(indexPartie, noTable, ronde) {
        var planchettes = gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable) - 1)].rondes[parseInt(ronde) - 1].planchettes;
        var i = 0;
        var j = 0;
        var accDirect = [];
        for (i = 0; i < planchettes.length; i++) {
            if (parseInt(planchettes[i].termine) != 1) {
                accDirect.push(planchettes[i].noPlanchette);
            }
        }
        return accDirect;
    },

    sauvgarderPartie: function(indexPartie){
        var objStr = JSON.stringify(gest.parties[parseInt(indexPartie)]);

        fs.writeFile(gest.parties[parseInt(indexPartie)].nom+'.txt', objStr, function (err) {
            if (err) throw err;
            console.log('SSSSSSSSSSSSSSS Saved! SSSSSSSSSSSSSSSS');
        });
    },

    retourneInfoPlanchette: function(idPlanchette){
        return retourInfoPlanchette(idPlanchette);
    },

    retourneNoPlanchetteIndex: function(indexPartie, indexTable, indexRonde, indexPlanchette){
        return gest.parties[parseInt(indexPartie)].tables[parseInt(indexTable)].rondes[parseInt(indexRonde)].planchettes[indexPlanchette].noPlanchette;
    },
    retournePlanchete:function(indexPartie, indexTable, indexRonde, indexPlanchette){
        return gest.parties[parseInt(indexPartie)].tables[parseInt(indexTable)].rondes[parseInt(indexRonde)].planchettes[indexPlanchette];
    },
    retourneRonde:function(indexPartie, indexTable, indexRonde){
        return gest.parties[parseInt(indexPartie)].tables[parseInt(indexTable)].rondes[parseInt(indexRonde)];
    },
    retourneNomPartie: function(indexPartie){
        return gest.parties[parseInt(indexPartie)].nom;
    },
    retourneTablePlanchettesJouees: function(indexPartie){
        return gest.parties[parseInt(indexPartie)].tablePlanchettesJouees;
    },
    retourneFantome: function(indexPartie){
        return gest.parties[parseInt(indexPartie)].fantome;
    }
};

function retourInfoPlanchette(idPlanchette){
    var i = 0;
    for(i = 0; i < tableADPlanchette.length; i++){
        if(tableADPlanchette[i][0] == idPlanchette){
            return tableADPlanchette[i][1];
        }
    }
}

function sauvgarderPartie(indexPartie){
    var objStr = JSON.stringify(gest.parties[parseInt(indexPartie)]);
    console.log(gest.parties[parseInt(indexPartie)]);
    fs.writeFile('./fichiers/parties jouees/'+gest.parties[parseInt(indexPartie)].nom+'.txt', objStr, 'utf8', function (err) {
        if (err) throw err;
        console.log('SSSSSSSSSSSSSSS Saved2! SSSSSSSSSSSSSSSS');
    });
}

function retourneLignePointage(pl, lp){
    var err = -1;
    var p = 0;
    for(p = 0; p < lp.length; p++){
        if(lp[p].noPlanchette == pl){
            return lp[p];
        }
    }
    return err;
}

function calculePointage(lPointage, fantome){
    var score1 = 0;
    var score2 = 0;
    var p1 = 0;
    var p2 = 0;
    var pointageTemp = 0;
    var pointPlus = 1;
    var pointEgal = 0.5;

    if(fantome == 1){
        pointPlus = 2;
        pointEgal = 1;
    }
    //console.log("Calcule");
    for(p1 = 0; p1 < lPointage.pointageEquipe.length; p1++) {
        if(lPointage.pointageEquipe[p1].fantome == 0) {
            pointageTemp = 0;
            for (p2 = 0; p2 < lPointage.pointageEquipe.length; p2++) {
                if ((p1 != p2) && (lPointage.pointageEquipe[p1].orientation == lPointage.pointageEquipe[p2].orientation) && (lPointage.pointageEquipe[p2].fantome == 0)) {
                    score1 = lPointage.pointageEquipe[p1].score;
                    score2 = lPointage.pointageEquipe[p2].score;
                    if (score1 > score2) {
                        pointageTemp = pointageTemp + pointPlus;
                        /*if ((fantome == true) && (nbTable === 3)) {
                         sNS = sNS + 1;
                         } else if ((fantome == true) && (nbTable === 4)) {
                         sNS = sNS + 0.5;
                         }*/
                    } else if (score1 == score2) {
                        pointageTemp = pointageTemp + pointEgal;

                        /*if ((fantome == true) && (nbTable === 3)) {
                         sNS = sNS + 0.5;
                         sEO = sEO + 0.5;
                         } else if ((fantome == true) && (nbTable === 4)) {
                         sNS = sNS + 0.25;
                         sEO = sEO + 0.25;
                         }*/
                    }
                    /*else {
                     sEO = sEO + 1;
                     if ((fantome == true) && (nbTable === 3)) {
                     sEO = sEO + 1;
                     } else if ((fantome == true) && (nbTable === 4)) {
                     sEO = sEO + 0.5;
                     }
                     }*/
                }
            }
            lPointage.pointageEquipe[p1].pointage = pointageTemp;
        }else{
            lPointage.pointageEquipe[p1].pointage = 1;
        }
    }

}

function determineSigne(v){
    switch(v){
        case '2':
            return '+';
        case '3':
            return '-';
        default :
            return '=';
    }

}

function determineCouleur(v){
    switch(v){
        case '1':
            return 'Trèfle';
        case '2':
            return 'Carreau';
        case '3':
            return 'Coeur';
        case '4':
            return 'Pique';
        case '5':
            return 'Sans atout';
        default :
            return 'Autre';
    }

}

function determineDeclarant(v){
    switch(v){
        case '1':
            return 'Nord';
        case '2':
            return 'Est';
        case '3':
            return 'Sud';
        case '4':
            return 'Ouest';
        default :
            return 'Autre';
    }

}

function retourneEntame(entame){
    switch (entame){
        case '1':
            return 'as';
        case '11':
            return 'valet';
        case '12':
            return 'dame';
        case '13':
            return 'roi';
    }
    return entame;
}

function planchettesTermine(ronde){
    var p = 0;
    for(p = 0; p < ronde.planchettes.length; p++){
        if(parseInt(ronde.planchettes[p].termine) != 1){
            return false;
        }
    }
    return true;
}

function rondeTermine(table, noRonde){
    if(parseInt(noRonde) != 0){
        if(parseInt(table.rondes[parseInt(noRonde) - 1].termine) != 1){
            return false;
        }
    }
    return true;
}

function planchetteTermine(ronde, noPlanchette){
    //console.log(ronde);
    //console.log(noPlanchette);
    if(parseInt(noPlanchette) != 0){
        if(parseInt(ronde.planchettes[parseInt(retourneIndexPlanchetteRonde(ronde, noPlanchette))].termine) != 1){
            return false;
        }
    }
    return true;
}

function rondesTermine(table){
    var r = 0;
    for(r = 0; r < table.rondes.length; r++){
        if(parseInt(table.rondes[r].termine) != 1){
            return false;
        }
    }
    return true;
}

function retourneIndexPlanchetteRonde(ronde, noPlanchette){
    var i = -1;
    var tailleI = ronde.planchettes.length;
    for(i = 0; i < tailleI; i++) {
        if(ronde.planchettes[i].noPlanchette === parseInt(noPlanchette)){
            return i;
        }

    }
    return i;
}

function retourneIndexPlanchette(indexPartie, noTable, noRonde, noPlanchette){
    var i = -1;
    var tailleI = gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable) - 1)].rondes[(parseInt(noRonde) - 1)].planchettes.length;
    for(i = 0; i < tailleI; i++) {
        if(gest.parties[parseInt(indexPartie)].tables[(parseInt(noTable) - 1)].rondes[(parseInt(noRonde) - 1)].planchettes[i].noPlanchette === parseInt(noPlanchette)){
            return i;
        }

    }
    return i;
}

function nouvellePartie(nomPartie, infoPartieJson){
    var indexPartie = 0;
    var fantome = infoPartieJson.partie.stats[0].fantome[0];
    infoPartieJson.partie.feuille[0].noms[0].nom1[0].nom.shift();
    infoPartieJson.partie.feuille[0].noms[0].nom2[0].nom.shift();
    console.log("Index nb rondes : "+infoPartieJson.partie.stats[0].indexNbRondes[0]);
    noms.nomsLigne1 = infoPartieJson.partie.feuille[0].noms[0].nom1[0].nom;
    noms.nomsLigne2 = infoPartieJson.partie.feuille[0].noms[0].nom2[0].nom;
    tblRndPlEq.nbEquipes(infoPartieJson.partie.stats[0].nbEquipes[0]);
    tblRndPlEq.nbPlanchettes(infoPartieJson.partie.stats[0].nbPlanchettes[0]);
    tblRndPlEq.creeTable();
    gest.parties.push(new partie(nomPartie,
        infoPartieJson.partie.stats[0].nbEquipes[0],
        infoPartieJson.partie.stats[0].nbPlanchettes[0],
        infoPartieJson.partie.stats[0].indexNbRondes[0],
        moduleNbRondes.retourneNbRondes(infoPartieJson.partie.stats[0].indexNbRondes[0]),
        fantome,
        infoPartieJson.partie.stats[0].fini[0],
        [],
        new feuillePointage(creeLignePointage(fantome, infoPartieJson.partie.stats[0].nbEquipes[0], infoPartieJson.partie.stats[0].nbPlanchettes[0]), inscritNoms(infoPartieJson.partie.stats[0].nbEquipes[0])),
        tblRndPlEq
    ));
    //console.log(gest.parties[0].feuillePointage);
    indexPartie = (parseInt(gest.parties.length)-1);


    creeTables(indexPartie);

    //console.log(gest.parties[indexPartie].tablePlanchettesJouees.retourneTable());

    return(indexPartie);
}

function inscritNoms(nbE){
    var tNoms = [];
    var equipe = [];
    var j = 0;
    for(j = 0; j < parseInt(nbE); j++){
        //console.log(noms.nomsLigne1[j]);
        equipe.push(noms.nomsLigne1[j], noms.nomsLigne2[j]);
        tNoms.push(equipe);

        equipe = [];

    }
    //console.log(tNoms);
    return tNoms;
}

function partieExistante(indexPartie){
    var partie = gest.parties[indexPartie];
}

/*function trouvePartie(nomPartie){
    return gest.parties[partieExiste(nomPartie)];
}*/

function partieExiste(nomPartie){
    var vide = -1;
    for(i = 0; i < gest.parties.length; i++){
        if(gest.parties[i].nom === nomPartie){
            return i;
        }
    }
    return vide;
}

function creeLignePointage(fantome, nbE, nbP){
    var tLignePointage = [];
    var i = 0;
    var j = 0;
    var ronde = 0;
    var equipesFantome = [];
    var nbPlParRondes = (parseInt(nbP)/(parseInt(nbE)-1));
    //var
    //tableauEquipeFantome
    for(j = 0; j < tableauEquipeFantome.length; j++){
        if(nbE == tableauEquipeFantome[j][0]){
            equipesFantome = tableauEquipeFantome[j][1];
        }
    }
    for(i = 0; i < parseInt(nbP); i++){
        ronde = Math.floor(i/nbPlParRondes);
        //console.log(equipesFantome[ronde]);
        if(fantome == 0){
            tLignePointage.push(new lignePointage(i + 1, creePointageEquipe(nbE, "", ""), 0));
        }else {
            tLignePointage.push(new lignePointage(i + 1, creePointageEquipe(nbE, equipesFantome[ronde][0], equipesFantome[ronde][1]), 1));
        }
    }
    //console.log(tLignePointage[0].pointageEquipe[0]);
    return tLignePointage;
}

function creePointageEquipe(nbE, eFEO, eFNS){
    var tPointageEquipe = [];
    var j = 0;
    var fantome = 0;
    var equipe = "";
    for(j = 0; j < parseInt(nbE); j++){
        equipe = lettre.retourneLettre(j+1);
        if((equipe == eFEO) || (equipe == eFNS)){
            fantome = 1;
        }
        tPointageEquipe.push(new pointageEquipe(equipe,0,0,"",fantome));
        fantome = 0;
    }
    //console.log(tPointageEquipe);
    return tPointageEquipe;
}

function creeTables(indexPartie){
    var nbTables = 0;
    var indexTable = 0;
    /*if(gest.parties[indexPartie].fantome == 1){
        nbTables = ((parseInt(gest.parties[indexPartie].nbEquipes)/2)-1);
    }else{*/
        nbTables = (parseInt(gest.parties[indexPartie].nbEquipes)/2);
    //}

    for(indexTable = 0; indexTable < nbTables; indexTable++){
        gest.parties[indexPartie].tables.push(new table(indexTable+1,[],0,0,0,0,0,0));
        creeRondes(indexTable, indexPartie);
        //console.log(gest.parties[indexPartie].tables[indexTable].rondes);

    }
}

function creeRondes(indexTable, indexPartie){
    var nbRondes = parseInt(gest.parties[indexPartie].nbRondes);
    var mouvement = mov.retourneMouvement(gest.parties[indexPartie].nbEquipes, indexTable, gest.parties[indexPartie].indexNbRondes);
    var indexENS = 0;
    var indexEEO = 0;

    var indexRonde = 0;
    var tailleGroupePl = 0;

    //console.log(mouvement);
    for(indexRonde = 0; indexRonde < nbRondes; indexRonde++){

        tailleGroupePl = mouvement[indexRonde][2].length;
        //console.log(tailleGroupePl);
        indexENS = mouvement[indexRonde][0];
        indexEEO = mouvement[indexRonde][1];

        gest.parties[indexPartie].tables[indexTable].rondes.push(
            new ronde(indexRonde + 1,
                lettre.retourneLettre(indexENS),
                lettre.retourneLettre(indexEEO),
                [noms.nomsLigne1[indexENS - 1], noms.nomsLigne2[indexENS - 1]],
                [noms.nomsLigne1[indexEEO - 1], noms.nomsLigne2[indexEEO - 1]],
                [],
                0
            )
        );

        creePlanchettes(indexRonde, indexTable, indexPartie, tailleGroupePl, mouvement);

    }
    console.log(tableADPlanchette);
}

function creePlanchettes(indexRonde, indexTable, indexPartie, tailleGroupePl, mouvement){
    var nbPlParRondes = (parseInt(gest.parties[indexPartie].nbPlanchettes)/((parseInt(gest.parties[indexPartie].nbRondes))*parseInt(tailleGroupePl)));
    var unePlanchette = 0;
    var indexPlanchette = 0;
    var vulOffset = 0;
    var ecart = nbPlParRondes - 1;
    var debut = 0;
    var ligneADPlanchette = [];
    var idPlanchette = "";
    var groupePlanchetes = 0;
    var i = 0;

    for(i = 0; i<tailleGroupePl; i++) {
        groupePlanchetes = mouvement[indexRonde][2][i];
        debut = ((nbPlParRondes * parseInt(groupePlanchetes)) - ecart);

        for (unePlanchette = debut; unePlanchette <= (nbPlParRondes * parseInt(groupePlanchetes)); unePlanchette++) {
            //console.log(unePlanchette+" "+nbPlParRondes+" "+tailleGroupePl+" "+(nbPlParRondes * parseInt(groupePlanchetes)));
            vulOffset = determineOffset(unePlanchette);
            idPlanchette = indexPartie.toString() + indexTable.toString() + indexRonde.toString() + indexPlanchette.toString() + Math.random();
            ligneADPlanchette = [idPlanchette, [indexPartie, indexTable, indexRonde, indexPlanchette]];
            tableADPlanchette.push(ligneADPlanchette);
            gest.parties[indexPartie].tablePlanchettesJouees.insertIdPlanchette(idPlanchette, unePlanchette);
            //console.log(varVulPPl[(unePlanchette-1)-(vulOffset*16)]);
            gest.parties[indexPartie].tables[indexTable].rondes[indexRonde].planchettes.push(
                new planchette(
                    idPlanchette,
                    unePlanchette,
                    varVulPPl[(unePlanchette - 1) - (vulOffset * 16)],
                    "",
                    "",
                    "",
                    "",
                    0,
                    0,
                    0
                )
            );
            indexPlanchette++;

        }
    }
    //console.log("-*-*-*-* "+indexRonde+" -*-*-*-*");
    //console.log(gest.parties[indexPartie].tables[indexTable].rondes[indexRonde].planchettes);
}

function determineOffset (planchette) {
    if((planchette > 16) && (planchette <= 32)){
        return 1;
    }
    if((planchette > 32) && (planchette <= 48)){
        return 2;
    }
    return 0;
}

function index(noA, addr){
    this.noAcces = noA;
    this.addresse = addr;
}

function partie(nomFichier, nbE, nbP, iNbR, nbR, pham, f, tTables, feuillePointage, tblPlJ){
    this.nom = nomFichier;
    this.nbEquipes = nbE;
    this.nbPlanchettes = nbP;
    this.indexNbRondes = iNbR;
    this.nbRondes = nbR;
    this.fantome = pham;
    this.fini = f;
    this.tables = tTables;
    this.feuillePointage = feuillePointage;
    this.tablePlanchettesJouees = tblPlJ;
}

function feuillePointage(tLignePointage, tNoms){
    this.lignePointage = tLignePointage;
    this.noms = tNoms;
}

function lignePointage(noPlanchette, tPointageEquipe, totalJoue){
    this.noPlanchette = noPlanchette;
    this.pointageEquipe = tPointageEquipe;
    this.totalJoue = totalJoue;
}

function pointageEquipe(equipe, score, pointage, orientation, fantome){
    this.equipe = equipe;
    this.score = score;
    this.pointage = pointage;
    this.orientation = orientation;
    this.fantome = fantome;
}

function table(noT, tRondes, noA, occ, overrideRonde, overrideRondePlanchette, overridePlanchette, ter){
    this.noTable = noT;
    this.rondes = tRondes;
    this.noAcces = noA;
    this.occupe = occ;
    this.overrideRonde = overrideRonde;
    this.overrideRondePlanchette = overrideRondePlanchette;
    this.overridePlanchette = overridePlanchette;
    this.termine = ter
}

function ronde(noR, sEquipeNS, sEquipeEO, tNomsNS, tNomsEO, tPl, ter){
    this.noRonde = noR;
    this.eNS = sEquipeNS;
    this.eEO = sEquipeEO;
    this.nomsNS = tNomsNS;
    this.nomsEO = tNomsEO;
    this.planchettes = tPl;
    this.termine = ter;
}

function planchette(idPl, noPl, vul, con, ctr, decl, ent, resul, sco, ter){
    this.idPlanchette = idPl;
    this.noPlanchette = noPl;
    this.vulnerabilite = vul;
    this.contrat = con;
    this.contre = ctr;
    this.declarant = decl;
    this.entame = ent;
    this.resultat = resul;
    this.score = sco;
    this.termine = ter;
}

/*function nouvellePartie(nFichier){
    var nouvelle = true;
    var partie = [];
    for(i = 0; i < gest.length; i++){
        partie = gest[i];
        if(partie[0] == nFichier){
            nouvelle = false
        }
        return nouvelle;
    }
}*/ /*getPartie: function(){
 return partie;
 },

 getNoms: function(){
 return noms;
 },

 setPartie: function(nbE, nbP, nbR, score, p, fini){
 partie.nbEquipes = nbE;
 partie.nbPlanchettes = nbP;
 partie.nbRondes = nbR;
 partie.score = score;
 partie.fantome = p;
 partie.fini = fini;
 },

 setNoms: function(nL1, nL2){
 noms.nomsLigne1 = nL1;
 noms.nomsLigne2 = nL2;
 },

 gestionnaire: function(){

 },

 getNoPartie: function(){
 return noPartie;
 },

 incNoPartie: function(){
 noPartie = noPartie + 1;
 },

 setNbTables: function(nb){
 nbTables = nb;
 },

 chargePartie: function(nFichier){
 if(nouvellePartie(nFichier) == true){

 }else{

 }
 }*/